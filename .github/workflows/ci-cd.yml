name: Complete CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

permissions:
  contents: write
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_PROJECT_KEY: joshskkim_realtime-recommendation-engine
  SONAR_ORGANIZATION: joshskkim

jobs:
  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Check for Snyk token
        id: check_snyk
        run: |
          if [ -n "${{ secrets.SNYK_TOKEN }}" ]; then
            echo "has_token=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_token=false" >> "$GITHUB_OUTPUT"
            echo "⚠️ Snyk token not configured, skipping Snyk scan"
          fi

      - name: Run Snyk Security Scan
        if: steps.check_snyk.outputs.has_token == 'true'
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=services/ml-service/requirements.txt
          command: test

  # Static Code Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for Sonar token
        id: check_sonar
        run: |
          if [ -n "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "has_token=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_token=false" >> "$GITHUB_OUTPUT"
            echo "⚠️ Sonar token not configured, skipping SonarCloud scan"
          fi

      - name: SonarQube Scan
        if: steps.check_sonar.outputs.has_token == 'true'
        uses: SonarSource/sonarqube-scan-action@v3.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        continue-on-error: true

  # Test all services
  test-services:
    name: Test ${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - ml-service
          - api-gateway
          - cache-service
    steps:
      - uses: actions/checkout@v4

      - name: Set up test environment for ${{ matrix.service }}
        run: |
          case "${{ matrix.service }}" in
            ml-service)
              echo "Setting up Python"
              ;;
            api-gateway)
              echo "Setting up Node.js"
              ;;
            user-service)
              echo "Setting up .NET"
              ;;
            cache-service)
              echo "Setting up Rust"
              ;;
          esac

      - name: Run tests for ${{ matrix.service }}
        run: |
          cd services/${{ matrix.service }}
          if [ -f "Makefile" ]; then
            make test || echo "Tests not configured"
          else
            echo "No Makefile found, skipping tests"
          fi

      - name: Upload coverage
        if: success()
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          files: ./services/${{ matrix.service }}/coverage.xml

  # Build and scan containers
  build-and-scan:
    name: Build & Scan ${{ matrix.service }}
    needs:
      - security-scan
      - test-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - ml-service
          - api-gateway
          - cache-service
          - stream-processor
          - user-service
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check if service directory exists
        id: check_dir
        run: |
          if [ -d "services/${{ matrix.service }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✓ Directory services/${{ matrix.service }} exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ Directory services/${{ matrix.service }} not found"
          fi

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          tags: ${{ matrix.service }}:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan image with Trivy
        if: steps.check_dir.outputs.exists == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:test
          format: table
          exit-code: '1'
          severity: CRITICAL,HIGH

      - name: Run Grype vulnerability scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ matrix.service }}:test
          fail-build: true
          severity-cutoff: high

  # Local Kubernetes testing with Kind
  k8s-test:
    name: Kubernetes Integration Test
    needs: build-and-scan
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: test
      CLUSTER_NAME: test-cluster
      SERVICES: ml-service api-gateway cache-service stream-processor user-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          config: |
            kind: Cluster
            apiVersion: kind.x-k8s.io/v1alpha4
            nodes:
              - role: control-plane
              - role: worker

      - name: Build & load images into Kind
        run: |
          for service in $SERVICES; do
            echo "→ Building $service"
            docker build \
              -t "$service:${IMAGE_TAG}" \
              "./services/$service"
            echo "→ Loading into Kind"
            kind load docker-image \
              "$service:${IMAGE_TAG}" \
              --name "${CLUSTER_NAME}"
          done

      - name: Install Redis & PostgreSQL via Helm
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

          helm upgrade --install redis bitnami/redis \
            --version 17.8.8 \
            --set auth.enabled=false \
            --wait --timeout 120s

          helm upgrade --install postgres bitnami/postgresql \
            --version 12.9.7 \
            --wait --timeout 120s

      - name: Deploy application YAML
        run: |
          # Ensure namespace exists
          kubectl create namespace recommendation-system --dry-run=client -o yaml \
            | kubectl apply -f -

          # Apply base configs
          if [ -d "k8s/base" ]; then
            kubectl apply -f k8s/base/
          fi

          # Patch image tags and apply deployments
          if [ -d "k8s/deployments" ]; then
            for file in k8s/deployments/*.yaml; do
              [ -f "$file" ] || continue
              sed -i "s|\(image: .*\):.*|\1:${IMAGE_TAG}|" "$file"
            done
            kubectl apply -f k8s/deployments/
          fi

      - name: Wait for all deployments
        run: |
          kubectl -n recommendation-system wait \
            --for=condition=available \
            --timeout=300s deployment --all

      - name: Run smoke tests
        run: |
          kubectl -n recommendation-system port-forward svc/ml-service 8000:8000 &
          sleep 5
          curl -f http://localhost:8000/health

  # Performance testing
  performance-test:
    name: Performance Testing
    needs: k8s-test
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: setup k6 action
        uses: grafana/setup-k6-action@v1

      - name: run k6 load tests
        uses: grafana/run-k6-action@v1
        with:
          path: tests/performance/load-test.js

      - name: Discover & run all k6 scripts
        run: |
          for script in tests/performance/*.js; do
            [ -f "$script" ] || continue
            echo "→ Executing $script"
            k6 run "$script" --vus 10 --duration 30s
          done

  # Cleanup Kind Cluster & Images
  cleanup:
    name: Cleanup Kind Cluster
    needs: performance-test
    if: always()
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: test
      CLUSTER_NAME: test-cluster
      SERVICES: ml-service api-gateway cache-service stream-processor user-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Delete Kind cluster
        run: |
          kind delete cluster --name "${CLUSTER_NAME}"

      - name: Remove Docker images
        run: |
          for service in $SERVICES; do
            docker rmi "$service:${IMAGE_TAG}" || true
          done

  # Dependency checking
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Check Python dependencies
        run: |
          if [ -d "services/ml-service" ]; then
            pip install safety
            cd services/ml-service
            safety scan --policy-file /dev/null || echo "Some vulnerabilities remain"
          fi

      - name: Check Node dependencies
        run: |
          if [ -d "services/api-gateway" ]; then
            cd services/api-gateway
            npm audit fix --force || echo "Some npm vulnerabilities remain"
          fi

      - name: Check Rust dependencies
        run: |
          if [ -d "services/cache-service" ]; then
            cd services/cache-service
            cargo audit || echo "Cargo audit not available"
          fi

  # Documentation validation
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Fix README markdown issues
        run: |
          cp README.md README.md.bak
          sed -i 's|<div align="center">||g' README.md
          sed -i 's|</div>||g' README.md
          sed -i 's|<strong>|**|g' README.md
          sed -i 's|</strong>|**|g' README.md
          sed -i 's|<img.*alt="\([^"]*\)".*/>|![\1](docs/images/placeholder.png)|g' README.md
          sed -i 's|josh.sk.kim@gmail.com|<josh.sk.kim@gmail.com>|g' README.md
          echo "" >> README.md
          truncate -s -1 README.md

      - name: Check markdown
        uses: DavidAnson/markdownlint-cli2-action@v13
        continue-on-error: true
        with:
          globs: '**/*.md'
          config: |
            MD013: false
            MD033: false
            MD022:
              lines_above: 1
              lines_below: 0
            MD031: false
            MD032: false
            MD034: false
            MD036: false
            MD047: false

      - name: Check API documentation
        run: |
          if [ -f "docs/api-spec.yaml" ]; then
            npx @apidevtools/swagger-cli validate docs/api-spec.yaml || echo "API spec validation failed"
          fi

      - name: Install dependencies
        run: npm ci

      - name: Semantic Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release