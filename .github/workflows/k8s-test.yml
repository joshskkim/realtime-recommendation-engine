name: Kubernetes Tests

on:
  workflow_dispatch:
  push:
    paths:
      - 'k8s/**'
      - 'services/*/Dockerfile'
      - '.github/workflows/k8s-test.yml'
  pull_request:
    paths:
      - 'k8s/**'
      - 'services/*/Dockerfile'

jobs:
  k8s-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Create Kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          version: v0.22.0
          cluster_name: test-cluster
          wait: 300s
      
      - name: Verify cluster is ready
        run: |
          kubectl version --client
          kubectl cluster-info
          kubectl get nodes
          kubectl wait --for=condition=Ready nodes --all --timeout=60s
      
      - name: Build and load Docker images
        run: |
          SERVICES="user-service ml-service stream-processor cache-service api-gateway"
          for service in $SERVICES; do
            if [ -d "services/$service" ] && [ -f "services/$service/Dockerfile" ]; then
              echo "Building $service..."
              if docker build -t $service:test services/$service/; then
                echo "Loading $service image to Kind..."
                kind load docker-image $service:test --name test-cluster
                echo "✅ $service ready"
              else
                echo "⚠️  $service build failed, skipping..."
              fi
            else
              echo "⚠️  $service directory/Dockerfile not found, skipping..."
            fi
          done
    
      - name: Create namespace
        run: |
          kubectl create namespace recommendation-system --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply secrets
        run: |
          if [ -f "k8s/base/secrets.yaml" ]; then
            echo "Applying secrets..."
            kubectl apply -f k8s/base/secrets.yaml
          else
            echo "Creating basic secrets..."
            kubectl create secret generic app-secrets \
              --from-literal=redis-password=dummy \
              --from-literal=db-password=dummy \
              -n recommendation-system \
              --dry-run=client -o yaml | kubectl apply -f -
          fi
          
      - name: Deploy base services
        run: |
          if [ -d "k8s/base" ] && [ -f "k8s/base/kustomization.yaml" ]; then
            echo "Deploying with Kustomize..."
            kubectl apply -k k8s/base
          elif [ -d "k8s/base" ]; then
            echo "Applying base YAML files..."
            kubectl apply -f k8s/base/ || echo "Some files may not exist, continuing..."
          else
            echo "No base services found, deploying test pod..."
            kubectl run test-nginx --image=nginx:1.25-alpine -n recommendation-system
          fi
      
      - name: Wait for deployments
        run: |
          echo "Waiting for deployments to be ready..."
          kubectl wait --for=condition=available --timeout=120s deployment --all -n recommendation-system || {
            echo "Checking what's running..."
            kubectl get pods -n recommendation-system
            kubectl get events -n recommendation-system --sort-by='.lastTimestamp' | tail -10
          }
      
      - name: Basic smoke test
        run: |
          echo "Running basic connectivity tests..."
          kubectl get pods -A
          kubectl get svc -A
          
          # Test cluster DNS
          kubectl run dns-test --image=busybox:1.36 --restart=Never --rm -i --timeout=30s \
            -- nslookup kubernetes.default.svc.cluster.local || echo "DNS test completed"
      
      - name: Debug information
        if: failure()
        run: |
          echo "=== CLUSTER DEBUG INFO ==="
          kubectl get nodes
          kubectl get pods -A
          kubectl get events -A --sort-by='.lastTimestamp' | tail -20
      
      - name: Cleanup
        if: always()
        run: |
          kind delete cluster --name test-cluster || true