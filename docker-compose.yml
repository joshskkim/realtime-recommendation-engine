services:
  cache-service:
    build:
      context: ./services/cache-service
      dockerfile: Dockerfile
    container_name: rec-cache-service
    ports:
      - "8082:8082"
    environment:
      - CACHE_SERVICE_HOST=0.0.0.0
      - CACHE_SERVICE_PORT=8082
      - CACHE_SERVICE_REDIS_URL=redis://redis:6379
      - CACHE_SERVICE_LOG_LEVEL=info
      - CACHE_SERVICE_MAX_CONNECTIONS=50
      - CACHE_SERVICE_CACHE_DEFAULT_TTL=3600
    depends_on:
      - redis
    networks:
      - recommendation-network
    # volumes:
    #   - ./services/cache-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Streams Processor
  stream-processor:
    build:
      context: ./services/stream-processor
      dockerfile: Dockerfile
    container_name: rec-stream-processor
    environment:
      - KAFKA_BROKERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
    depends_on:
      - kafka
      - redis
    networks:
      - recommendation-network
    volumes:
      - ./services/stream-processor:/app
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.55.0
    container_name: rec-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - recommendation-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:11.3.0
    container_name: rec-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - recommendation-network
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: rec-kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - recommendation-network
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"] # Checks if port 9092 is open
      interval: 10s # Check every 10 seconds
      timeout: 5s # Timeout for the healthcheck command
      retries: 5 # Number of retries before marking as unhealthy
      start_period: 15s
  # API Gateway (Node.js)
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: rec-api-gateway
    ports:
      - "3001:3001"  # Changed from 8080 to 3001
    environment:
      - NODE_ENV=development
      - PORT=3001  # Changed internal port too
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:29092
      - ML_SERVICE_URL=http://ml-service:8000
      - USER_SERVICE_URL=http://user-service:5001
      - CACHE_SERVICE_URL=http://cache-service:8001
      - LOG_LEVEL=info
    depends_on:
      - redis
      - kafka
      - ml-service
      - user-service
      - cache-service
    networks:
      - recommendation-network
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service (C#)
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: rec-user-service
    ports:
      - "5001:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5001
      - ConnectionStrings__PostgreSQL=Host=postgres;Database=userdb;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - Kafka__BootstrapServers=kafka:29092
      - Serilog__MinimumLevel=Information
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - recommendation-network
    volumes:
      - user-service-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for User Service
  postgres:
    image: postgres:15-alpine
    container_name: rec-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=userdb
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - recommendation-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Existing services from Phase 1
  ml-service:
    build:
      context: ./services/ml-service
      dockerfile: Dockerfile
    container_name: rec-ml-service
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - kafka
    networks:
      - recommendation-network
    volumes:
      - ./services/ml-service:/app
      - ml-models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: rec-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - recommendation-network
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: rec-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - recommendation-network
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  redis:
    image: redis:latest
    container_name: rec-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    networks:
      - recommendation-network
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: rec-redis-commander
    depends_on:
      - redis
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    networks:
      - recommendation-network

networks:
  recommendation-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  kafka-data:
  zookeeper-data:
  zookeeper-logs:
  ml-models:
  user-service-logs:
  prometheus-data:
  grafana-data: